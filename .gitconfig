[core]
  #enable working directory by default
  bare                     = false
  #be sure to get all refs for reflog
  logallrefupdates         = true
  editor                   = vim
  # personal default .gitignore
  excludesfile = /Users/chrismar035/.gitignore_global
  # disable wrapping in less paginated deff and logs
  pager = diff-so-fancy | less --tabs=1,5 -R
#defaults for any master branches
[remote "origin"]
  push = HEAD
[branch "master"]
  remote = origin
  #merge  = refs/heads/master
  push   = HEAD
# default size of gui
[gui]
  geometry = 1400x800+150+150 400 300
  commitmsgwidth = 50
  gcwarning = false
[alias]
  # Commit first; rebase later
  save    = !git add -A && git commit -m 'SAVEPOINT'
  wip     = !git add -u && git commit -m "WIP"
  undo    = reset HEAD~1 --mixed
  # Edit config file
  ec      = config --global -e
  # Single line log
  slog    = log --oneline
  # File names in logs
  flog    = log --name-only --relative-date --abbrev-commit
  # colorful log (format syntax test)
  clog    = log --format=format:"%Cgreen%h%Creset-%C(yellow)%s%Creset%n%b"
  # super awesome colored graph log
  lg      = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  # order branches by last commit date
  latest  = "for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'"
  # two days of commits
  standup = "log --since '2 days ago' --oneline --author chris@chrismar035.com"
  # commit
  c       = commit
  # commit all modified files (doesn't do untracked)
  acom    = commit -a
  # ammend previous commit
  ca      = commit --amend
  # ammend all into previous commit
  caa     = commit -a --amend
  # stage deleted tracked files
  df      = add -u
  # Clean up old local branches with missing remotes (Remember to push any
  # branches you want to save first)
  cleanup = !git branch -vv | grep gone] | tr -s ' ' | cut -d ' ' -f 2 | xargs git branch -D ' '
  # checkout
  co      = checkout
  com     = checkout master
  # new branch
  cob     = checkout -b
  # short syntax for working directory status
  s       = status -sb
  # shorter diff
  d       = diff
  # word-level diff (instead of line level)
  dw      = diff --word-diff
  # ammend my last commit
  fix     = commit -a --amend -C HEAD
  # update feature branch from the lastest remote master
  sync    = "!f() { echo Syncing with master && git checkout master && git pull && git checkout - && git rebase master; }; f"
  # delete and recreate a rebased remote branch
  rebuild = "!f() { echo Rebuilding $1 from remote && git checkout master && git branch -D $1 && git checkout -t origin/$1; }; f"
  # Hard reset to a rebased remote branch
  reorig  = "reset --hard HEAD@{upstream}"
  restream= "!f() { git fetch && git reset --hard HEAD@{upstream}; }; f"
  # hard reset
  hr      = reset --hard
  # delete a branch
  db      = "!f() { git branch -d $1 && git remote prune origin; }; f"
  # remove untracked files
  cf     = clean -f
  # remove deleted remote branches
  rp      = remote prune origin
  # rebase
  rb      = rebase
  # rebase master
  rbm     = rebase master
  # rebase continue
  rc      = rebase --continue
  # rebase skip
  rs      = rebase --skip
  # rebase interactively
  ri      = rebase -i
  # rebase onto master interactively
  rim     = rebase master -i
  # abort an in progress rebase
  fuckit  = rebase --abort
  # force push
  pf      = push --force-with-lease
  # push
  p       = push
  # post-merge -- multiple clean up tasks after a merge happens
  pm      = "!f() { git checkout master && git pull && git sweep; }; f"
  # push new branch and track
  po      = push -u origin
  # pull
  l       = pull
  # cherry pick
  cp      = cherry-pick
  # Merge a branch without fastforward
  mnff    = merge --no-ff
  # mergetool
  mt = mergetool
[push]
  # push only current branch to its upstream unless specified
  default = upstream
[pull]
  # pull only current branch unless specified
  default = current
  # only rebase divergent remotes on pull
  # and preserve merges when rebasing
  rebase = preserve
  # Stash dirty changes before pulling/rebasing/merging
  autostash = true
# color our gits
[color]
  branch = auto
  diff   = auto
  status = auto
[color "branch"]
  current = yellow reverse
  local   = yellow
  remote  = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old  = red bold
  new  = green bold
[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan
# fix my typos for me
[help]
  autocorrect = 1
# me, myself
[user]
  name  = Chris Marshall
  email = chris@chrismar035.com
# help me with conflicts
[merge]
  tool = diffconflicts
[mergetool "diffmerge"]
  cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
  trustExitCode = false
[mergetool]
  keepBackup = false
[core "pull"]
  rebase = true
[rebase]
  stat = true
  autosquash = true
  autostash = true
[github]
  user = chrismar035
[mergetool "diffconflicts"]
  cmd = diffconflicts vim $BASE $LOCAL $REMOTE $MERGED
  trustExitCode = true
  keepBackup = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
